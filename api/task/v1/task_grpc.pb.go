// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: task/v1/task.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskClient is the client API for Task service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskClient interface {
	// 新建医院
	CreateHospital(ctx context.Context, in *CreateHospitalRequest, opts ...grpc.CallOption) (*CreateHospitalReply, error)
	// 注册员工
	RegisterEmployee(ctx context.Context, in *RegisterEmployeeRequest, opts ...grpc.CallOption) (*RegisterEmployeeReply, error)
	// 创建任务
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskReply, error)
	// 更新任务
	UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskReply, error)
	// 分配任务
	AssignTask(ctx context.Context, in *AssignTaskRequest, opts ...grpc.CallOption) (*AssignTaskReply, error)
	// 获取员工的任务列表
	GetEmployeeTasks(ctx context.Context, in *GetEmployeeTasksRequest, opts ...grpc.CallOption) (*GetEmployeeTasksReply, error)
	// 获取医院的任务列表
	GetHospitalTasks(ctx context.Context, in *GetHospitalTasksRequest, opts ...grpc.CallOption) (*GetHospitalTasksReply, error)
	// 获取医院列表
	GetHospitals(ctx context.Context, in *GetHospitalsRequest, opts ...grpc.CallOption) (*GetHospitalsReply, error)
	// 获取医院的员工列表
	GetEmployees(ctx context.Context, in *GetEmployeesRequest, opts ...grpc.CallOption) (*GetEmployeesReply, error)
}

type taskClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskClient(cc grpc.ClientConnInterface) TaskClient {
	return &taskClient{cc}
}

func (c *taskClient) CreateHospital(ctx context.Context, in *CreateHospitalRequest, opts ...grpc.CallOption) (*CreateHospitalReply, error) {
	out := new(CreateHospitalReply)
	err := c.cc.Invoke(ctx, "/task.v1.Task/CreateHospital", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) RegisterEmployee(ctx context.Context, in *RegisterEmployeeRequest, opts ...grpc.CallOption) (*RegisterEmployeeReply, error) {
	out := new(RegisterEmployeeReply)
	err := c.cc.Invoke(ctx, "/task.v1.Task/RegisterEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskReply, error) {
	out := new(CreateTaskReply)
	err := c.cc.Invoke(ctx, "/task.v1.Task/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskReply, error) {
	out := new(UpdateTaskReply)
	err := c.cc.Invoke(ctx, "/task.v1.Task/UpdateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) AssignTask(ctx context.Context, in *AssignTaskRequest, opts ...grpc.CallOption) (*AssignTaskReply, error) {
	out := new(AssignTaskReply)
	err := c.cc.Invoke(ctx, "/task.v1.Task/AssignTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetEmployeeTasks(ctx context.Context, in *GetEmployeeTasksRequest, opts ...grpc.CallOption) (*GetEmployeeTasksReply, error) {
	out := new(GetEmployeeTasksReply)
	err := c.cc.Invoke(ctx, "/task.v1.Task/GetEmployeeTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetHospitalTasks(ctx context.Context, in *GetHospitalTasksRequest, opts ...grpc.CallOption) (*GetHospitalTasksReply, error) {
	out := new(GetHospitalTasksReply)
	err := c.cc.Invoke(ctx, "/task.v1.Task/GetHospitalTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetHospitals(ctx context.Context, in *GetHospitalsRequest, opts ...grpc.CallOption) (*GetHospitalsReply, error) {
	out := new(GetHospitalsReply)
	err := c.cc.Invoke(ctx, "/task.v1.Task/GetHospitals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetEmployees(ctx context.Context, in *GetEmployeesRequest, opts ...grpc.CallOption) (*GetEmployeesReply, error) {
	out := new(GetEmployeesReply)
	err := c.cc.Invoke(ctx, "/task.v1.Task/GetEmployees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServer is the server API for Task service.
// All implementations must embed UnimplementedTaskServer
// for forward compatibility
type TaskServer interface {
	// 新建医院
	CreateHospital(context.Context, *CreateHospitalRequest) (*CreateHospitalReply, error)
	// 注册员工
	RegisterEmployee(context.Context, *RegisterEmployeeRequest) (*RegisterEmployeeReply, error)
	// 创建任务
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskReply, error)
	// 更新任务
	UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskReply, error)
	// 分配任务
	AssignTask(context.Context, *AssignTaskRequest) (*AssignTaskReply, error)
	// 获取员工的任务列表
	GetEmployeeTasks(context.Context, *GetEmployeeTasksRequest) (*GetEmployeeTasksReply, error)
	// 获取医院的任务列表
	GetHospitalTasks(context.Context, *GetHospitalTasksRequest) (*GetHospitalTasksReply, error)
	// 获取医院列表
	GetHospitals(context.Context, *GetHospitalsRequest) (*GetHospitalsReply, error)
	// 获取医院的员工列表
	GetEmployees(context.Context, *GetEmployeesRequest) (*GetEmployeesReply, error)
	mustEmbedUnimplementedTaskServer()
}

// UnimplementedTaskServer must be embedded to have forward compatible implementations.
type UnimplementedTaskServer struct {
}

func (UnimplementedTaskServer) CreateHospital(context.Context, *CreateHospitalRequest) (*CreateHospitalReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHospital not implemented")
}
func (UnimplementedTaskServer) RegisterEmployee(context.Context, *RegisterEmployeeRequest) (*RegisterEmployeeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterEmployee not implemented")
}
func (UnimplementedTaskServer) CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedTaskServer) UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedTaskServer) AssignTask(context.Context, *AssignTaskRequest) (*AssignTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignTask not implemented")
}
func (UnimplementedTaskServer) GetEmployeeTasks(context.Context, *GetEmployeeTasksRequest) (*GetEmployeeTasksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeeTasks not implemented")
}
func (UnimplementedTaskServer) GetHospitalTasks(context.Context, *GetHospitalTasksRequest) (*GetHospitalTasksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHospitalTasks not implemented")
}
func (UnimplementedTaskServer) GetHospitals(context.Context, *GetHospitalsRequest) (*GetHospitalsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHospitals not implemented")
}
func (UnimplementedTaskServer) GetEmployees(context.Context, *GetEmployeesRequest) (*GetEmployeesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployees not implemented")
}
func (UnimplementedTaskServer) mustEmbedUnimplementedTaskServer() {}

// UnsafeTaskServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServer will
// result in compilation errors.
type UnsafeTaskServer interface {
	mustEmbedUnimplementedTaskServer()
}

func RegisterTaskServer(s grpc.ServiceRegistrar, srv TaskServer) {
	s.RegisterService(&Task_ServiceDesc, srv)
}

func _Task_CreateHospital_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHospitalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).CreateHospital(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.v1.Task/CreateHospital",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).CreateHospital(ctx, req.(*CreateHospitalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_RegisterEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).RegisterEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.v1.Task/RegisterEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).RegisterEmployee(ctx, req.(*RegisterEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.v1.Task/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.v1.Task/UpdateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).UpdateTask(ctx, req.(*UpdateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_AssignTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).AssignTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.v1.Task/AssignTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).AssignTask(ctx, req.(*AssignTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetEmployeeTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmployeeTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetEmployeeTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.v1.Task/GetEmployeeTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetEmployeeTasks(ctx, req.(*GetEmployeeTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetHospitalTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHospitalTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetHospitalTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.v1.Task/GetHospitalTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetHospitalTasks(ctx, req.(*GetHospitalTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetHospitals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHospitalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetHospitals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.v1.Task/GetHospitals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetHospitals(ctx, req.(*GetHospitalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetEmployees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmployeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetEmployees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.v1.Task/GetEmployees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetEmployees(ctx, req.(*GetEmployeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Task_ServiceDesc is the grpc.ServiceDesc for Task service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Task_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "task.v1.Task",
	HandlerType: (*TaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHospital",
			Handler:    _Task_CreateHospital_Handler,
		},
		{
			MethodName: "RegisterEmployee",
			Handler:    _Task_RegisterEmployee_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _Task_CreateTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _Task_UpdateTask_Handler,
		},
		{
			MethodName: "AssignTask",
			Handler:    _Task_AssignTask_Handler,
		},
		{
			MethodName: "GetEmployeeTasks",
			Handler:    _Task_GetEmployeeTasks_Handler,
		},
		{
			MethodName: "GetHospitalTasks",
			Handler:    _Task_GetHospitalTasks_Handler,
		},
		{
			MethodName: "GetHospitals",
			Handler:    _Task_GetHospitals_Handler,
		},
		{
			MethodName: "GetEmployees",
			Handler:    _Task_GetEmployees_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task/v1/task.proto",
}
